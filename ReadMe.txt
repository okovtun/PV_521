https://github.com/okovtun/PV_521.git
https://www.youtube.com/playlist?list=PLeqyOOqxeiINwoETYVNufASRa3i53K2Gb

https://stamina-online.com/ru/lessons/ru
https://www.typingstudy.com/ru-lao-1/numeric_keypad

https://stackoverflow.com/questions/76674926/vs-2022-error-encountered-while-pushing-to-the-remote-repository-git-failed-w


/////////////////////////////////////////////////////////////////////////////////
/////////////////			STANDARD TEMPLATE LIBRARY				/////////////
/////////////////////////////////////////////////////////////////////////////////

https://legacy.cplusplus.com/reference/stl/

TODO:
1. Прочитать Базу из файла;
2. Добавить время правонарушения:
	https://legacy.cplusplus.com/reference/ctime/

TODO:
1. Вывести словарь на экран;
2. В Solution 'STL' добавить проект 'Police', и в этом проекте:
	Реализовать базу данных ГАИ по штрафным квитанциям с помощью бинарного дерева.
	Ключом будет служить номер автомашины, значением узла — список правонарушений.
	Если квитанция добавляется в первый раз, то в дереве появляется новый узел, 
	а в списке данные по правонарушению; если нет, то данные заносятся в существующий список. 
	Необходимо также реализовать следующие операции: 
		■ Полная распечатка базы данных (по номерам машин и списку правонарушений, числящихся за ними);
		■ Распечатка данных по заданному номеру;
		■ Распечатка данных по диапазону номеров;
		■ Сохраняйте и загружайте информацию из файла.

DONE:
1. Вызвать для Вектора метод erase();						DONE
2. Создать std::list, и добавить в него значение по индексу;DONE
3. Удалить значение по индексу из list-a;					DONE
4. Создать std::forward_list, и добавить в него значение по индексу;
5. Удалить значение по индексу из forward_list-a;


DONE:
1. Теория;
2. Написать функцию Factorial(), которая в случае арифметического переполнения бросает исключение;
3. В репозитории 'DataContainers' создать ветку 'Exceptions',  в этой ветке добавить механизм исключений в списки;

/////////////////////////////////////////////////////////////////////////////////
/////////////////				DATA CONTAINERS						/////////////
/////////////////////////////////////////////////////////////////////////////////

Time:
	https://legacy.cplusplus.com/reference/ctime/
	https://legacy.cplusplus.com/reference/ctime/clock/
	https://legacy.cplusplus.com/reference/ctime/CLOCKS_PER_SEC/

TODO:
1. Написать метод depth(), который возвращает глубину дерева;			DONE
2. Измерить производительность всех методов кроме insert() и print();	DONE
3. Написать метод tree_print() который выводит дерево в виде дерева;
4. Написать метод Balance(), который балансирует Бинарное дерево;

DONE:
1. Написать метод ??? Sum(???) который возвращает сумму элементов дерерва;							DONE
2. Написать метод ??? Avg(???) который возвращает среднее-арифметическое элементов дерерва;			DONE
3. Написать класс 'UniqueTree', который хранит только уникальные значения и не сохраняет дубликаты;	DONE
4. Написать метод Clear(), который удаляет все элементы дерева;										
5. Написать метод Erase(), который удаляет элемент из дерева по указанному значению;

DONE:
В проекте 'Recursion' написать следующие рекурсивные функции:
	??? Factorial(???);	//возвращает факториал числа
	??? Power(???);		//возводит число в степень
	??? Fibonacci(???);	//Выводит на экран ряд Фибоначчи до указанного предела

DONE:
1. Написать метод erase();
2. Проверочный код в секции 'HOME_WORK' должен заработать:
	https://github.com/okovtun/PV_521/blob/51687c2f16ee30e24ec167d0f402f868e2bba72e/DataContainers/List/main.cpp#L223-L230

DONE:
1. В Solution 'DataContainers' добавить проект 'ListHW', и в нем реализовать класс 'List',
   описывающий двусвязный список;

DONE:
1. Создать список заданное число элементов следующим образом:	DONE
	ForwardList list(5);

2. Перегрузить оператор []:						DONE
	for(int i=0; i<list.get_size(); i++)
		list[i] = rand()%100;
	for(int i=0; i<list.get_size(); i++)
		cout << list[i] << tab;
	cout << endl;

3. Провести тест производительности оператора [];DONE
4. Реализовать MoveSemantic (The Rule Of five) в классе 'ForwardList';
5. Протестировать производительность Copy-методов;			DONE
6. Оптимизировать производительность Copy-методов;			DONE

DONE:
1. Решить проблему с выходом за пределы списка в методе insert();
2. Написать метод erase();
3. Деструктор списка должен полностью очищать список;
4. ForwardList fusion = list1 + list2;
   fusion.print();

DONE:
В класс 'ForwardList' добавить следующие методы:
1. push_back();
2. pop_front();
3. pop_back();
4. insert();
5. erase();

/////////////////////////////////////////////////////////////////////////////////
/////////////////				  INHERITANCE						/////////////
/////////////////////////////////////////////////////////////////////////////////

CSV

TODO:
1. Добить иерархию треугольников;
2. Создать ветку 'Geometry_HW_3';
3. Вынести код, создающий инструменты для рисования в Базовый класс;

DONE:
0. Сделать COMMIT и создать ветку 'Geometry_HW_2';
1. Добавить инкапсуляцию для первичных размеров фигур;
2. Написать класс 'Circle':
	https://learn.microsoft.com/en-us/windows/win32/gdi/filled-shapes

Продолжить задачу в ветке 'Abstract_HW_1':
Реализовать иерархию геометрических фигур: квадрат, треугольник, круг, прямоугольник.....
Для каждой фигуры должны выводиться ее первичные ствойства, такие как: длина стороны квадрата,
радиус круга и т.д., и вторичные свойства, такие как: площадь и периметр.
Так же, должна быть возможность нарисовать каждую фигуру.

DONE:
От ветки 'master' создать векту 'LoadHW', и в ней попробовать добить функцию Load();
-----------------------------------------------
Прочитать группу из файла, в результате чего должен появиться такой же массив объектов, 
как мы создавали в main().

DONE:
1. В проект 'Academy' добавить класс 'Graduate' (Дипломник);
2. Залить репу на GitHub, и прислать ссылку;

DONE:
1. В ветке 'StringSeparation' вынести в отдельные файлы классы
   'Point' и 'Fraction';
2. От ветки 'StringSeparation' создать ветку 'LIBs', и в ней,
   собрать и проверить статические библиотеки для классов:
	'Point', 'Fraction' и 'String';

DONE:
1. Теория;

DONE:
1. Выучить теорию;
2. Написать CopyAssignment;
3. В Solution 'IntroductionToOOP' добавить проект Matrix, и в нем реализовать класс Matrix,
   описывающий Матрицу.
   В классе должны быть все необходимые методы и операции (+, -, *, /);

DONE:
В Solution 'IntroductionToOOP' добавить проект 'String' и в этом проекте реализовать 
класс 'String', который способен выполнять следующие операции:
	String str1 = "Hello";
	String str2 = "World";
	String str3 = str1 + str2;
	cout << str3 << endl;

DONE:
0. !!!!!!! Выучить теорию !!!!!!!
1. Проверочный код в секции 'STREAMS_CHECK' должен заработать:
	https://github.com/okovtun/PV_521/blob/35173b38f18dedc52c6e5b449c55a1dddc84c68e/IntroductionToOOP/Fraction/main.cpp#L345C1-L350C24
2. Проверочный код в секции 'CONVERSIONS_FROM_CLASS_TO_OTHER' должен заработать:
	https://github.com/okovtun/PV_521/blob/54dc1005e6a623fb1476c732c23d7b5bdec858b0/IntroductionToOOP/Fraction/main.cpp#L414-L416
3. Проверочный код в секции 'HAVE_A_NICE_DAY' должен заработать:					DONE
	https://github.com/okovtun/PV_521/blob/54dc1005e6a623fb1476c732c23d7b5bdec858b0/IntroductionToOOP/Fraction/main.cpp#L419C1-L423C1

DONE:
0. !!!!!!! Выучить теорию !!!!!!!
1. Для класса 'Fraction' перегрузить все арифметические операторы:	/, +, -;
2. Перегрузить составные присваивания: +=, -=, *=, /=;
3. Перегрузить Incremento/Decremento (++/--);
4. Перегрузить операторы сравнения: ==, !=, >, <, >=, <=;

DONE:
0. !!!!!!! Выучить теорию !!!!!!!
1. В проекте 'IntroductionToOOP' реализовать метод   ??? distance(???),
   который возвращает расстояние ДО УКАЗАННОЙ ТОЧКИ;		DONE
2. В проекте 'IntroductionToOOP' реализовать функцию ??? distance(???),
   которая возвращает расстояние МЕЖДУ ДВУМЯ ТОЧКАМИ;